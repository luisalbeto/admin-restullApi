generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  id          String   @id @default(uuid())
  title       String
  description String
  complete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  eventDate   DateTime 
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userID], references: [id])
  userID String

  comments Comment[] // Relación con los comentarios
}

// Modelo para la tabla de comentarios
model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  todo   Todo   @relation(fields: [todoId], references: [id])
  todoId String
}

// Modelos de autenticación
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String
  lastName      String
  userName      String    @unique
  password      String
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[] 
  comments      Comment[] // Relación con los comentarios

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
